/* The following code was generated by JFlex 1.4.1 on 24.08.2021, 16:33 */

/*
 * Generated on 8/24/21, 4:33 PM
 */
package pl.andus.skeditor;

import java.io.*;
import javax.swing.text.Segment;

import org.fife.ui.rsyntaxtextarea.*;


/**
 * 
 */

public class sksyntax extends AbstractJFlexTokenMaker {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int EOL_COMMENT = 1;
  public static final int YYINITIAL = 0;

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\21\1\10\1\0\1\21\1\17\22\0\1\54\1\35\1\15"+
    "\1\20\1\1\1\35\1\35\1\7\1\37\1\37\1\35\1\40\1\35"+
    "\1\25\1\23\1\41\1\4\1\63\1\16\1\16\1\6\1\6\1\6"+
    "\1\6\1\3\1\3\1\45\1\35\1\17\1\64\1\17\1\35\1\36"+
    "\6\5\24\1\1\37\1\11\1\37\1\17\1\2\1\0\1\31\1\14"+
    "\1\47\1\52\1\24\1\30\1\53\1\42\1\44\1\60\1\57\1\32"+
    "\1\51\1\13\1\50\1\43\1\62\1\27\1\33\1\26\1\12\1\55"+
    "\1\46\1\22\1\56\1\61\1\34\1\17\1\34\1\35\uff81\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\2\0\2\1\2\2\1\3\1\4\1\1\1\5\1\6"+
    "\1\7\2\1\1\10\5\1\1\11\10\1\1\12\1\13"+
    "\3\12\1\0\1\14\1\0\2\14\1\3\1\15\1\0"+
    "\1\3\1\1\2\5\1\16\1\17\15\1\1\20\7\1"+
    "\5\0\1\17\1\0\1\21\1\3\1\22\2\3\1\15"+
    "\1\3\1\1\1\5\1\23\1\5\4\1\1\0\1\1"+
    "\1\24\10\1\1\0\3\1\1\0\4\1\5\0\1\3"+
    "\1\1\1\5\2\1\1\25\1\1\2\0\2\1\1\26"+
    "\2\1\1\0\3\1\1\0\1\20\2\1\30\0\4\1"+
    "\2\0\1\27\1\0\1\3\1\30\1\5\2\1\1\0"+
    "\2\24\1\1\4\0\2\1\1\0\2\1\76\0\4\1"+
    "\3\0\1\3\1\5\2\1\1\0\1\1\4\0\2\1"+
    "\1\0\2\1\117\0\5\1\4\0\1\1\1\0\1\30"+
    "\1\0\1\30\15\0\1\30\23\0\1\30\45\0\1\1"+
    "\1\0\2\1\4\0\1\1\36\0\1\30\11\0\1\30"+
    "\1\0\1\30\36\0\1\1\1\0\1\1\1\26\1\0"+
    "\1\20\1\0\1\1\57\0\1\30\16\0\1\30\5\0"+
    "\1\1\1\0\1\1\2\0\1\20\1\0\1\20\74\0"+
    "\1\1\27\0\1\30\6\0\1\30\22\0\1\30\17\0"+
    "\1\30\103\0\1\30\60\0";

  private static int [] zzUnpackAction() {
    int [] result = new int[845];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\65\0\152\0\237\0\324\0\u0109\0\u013e\0\152"+
    "\0\u0173\0\u01a8\0\152\0\u01dd\0\u0212\0\u0247\0\152\0\u027c"+
    "\0\u02b1\0\u02e6\0\u031b\0\u0350\0\152\0\u0385\0\u03ba\0\u03ef"+
    "\0\u0424\0\u0459\0\u048e\0\u04c3\0\u04f8\0\u052d\0\152\0\u0562"+
    "\0\u0597\0\u05cc\0\u0601\0\u0636\0\u0212\0\u066b\0\u06a0\0\u06d5"+
    "\0\152\0\u070a\0\u073f\0\u0774\0\u07a9\0\u07de\0\152\0\u0813"+
    "\0\u0848\0\u087d\0\u08b2\0\u08e7\0\u091c\0\u0951\0\u0986\0\u09bb"+
    "\0\u09f0\0\u0a25\0\u0a5a\0\u0a8f\0\u0ac4\0\u0af9\0\u0b2e\0\u0b63"+
    "\0\u0b98\0\u0bcd\0\u0c02\0\u0c37\0\u0c6c\0\u0ca1\0\u0cd6\0\u0d0b"+
    "\0\u0d40\0\u0d75\0\u0daa\0\u0ddf\0\u06a0\0\u0e14\0\152\0\u0e49"+
    "\0\u0e7e\0\u070a\0\u0eb3\0\u0ee8\0\u0f1d\0\152\0\u0f52\0\u0f87"+
    "\0\u0fbc\0\u0ff1\0\u1026\0\u105b\0\u1090\0\u10c5\0\u10fa\0\u112f"+
    "\0\u1164\0\u1199\0\u11ce\0\u1203\0\u1238\0\u126d\0\u12a2\0\u12d7"+
    "\0\u130c\0\u1341\0\u1376\0\u13ab\0\u13e0\0\u1415\0\u144a\0\u147f"+
    "\0\u14b4\0\u14e9\0\u151e\0\u1553\0\u1588\0\u15bd\0\u15f2\0\u1627"+
    "\0\u165c\0\237\0\u1691\0\u16c6\0\u16fb\0\u1730\0\u1765\0\237"+
    "\0\u179a\0\u17cf\0\u1804\0\u1839\0\u186e\0\u18a3\0\u18d8\0\237"+
    "\0\u190d\0\u1942\0\u1977\0\u19ac\0\u19e1\0\u1a16\0\u1a4b\0\u1a80"+
    "\0\u1ab5\0\u1aea\0\u1b1f\0\u1b54\0\u1b89\0\u1bbe\0\u1bf3\0\u1c28"+
    "\0\u1c5d\0\u1c92\0\u1cc7\0\u1cfc\0\u1d31\0\u1d66\0\u1d9b\0\u1dd0"+
    "\0\u1e05\0\u1e3a\0\u1e6f\0\u1ea4\0\u1ed9\0\u1f0e\0\u1f43\0\u1f78"+
    "\0\u1fad\0\u1fe2\0\u2017\0\237\0\u204c\0\u2081\0\u20b6\0\u20eb"+
    "\0\152\0\u2120\0\u2155\0\u218a\0\u21bf\0\u21f4\0\u2229\0\u225e"+
    "\0\u2293\0\u22c8\0\u22fd\0\u2332\0\u2367\0\u239c\0\u23d1\0\u2406"+
    "\0\u243b\0\u2470\0\u24a5\0\u24da\0\u250f\0\u2544\0\u2579\0\u25ae"+
    "\0\u25e3\0\u2618\0\u264d\0\u2682\0\u26b7\0\u26ec\0\u2721\0\u2756"+
    "\0\u278b\0\u27c0\0\u27f5\0\u282a\0\u285f\0\u2894\0\u28c9\0\u28fe"+
    "\0\u2933\0\u2968\0\u299d\0\u29d2\0\u2a07\0\u2a3c\0\u2a71\0\u2aa6"+
    "\0\u2adb\0\u2b10\0\u2b45\0\u2b7a\0\u2baf\0\u2be4\0\u2c19\0\u2c4e"+
    "\0\u2c83\0\u2cb8\0\u2ced\0\u2d22\0\u2d57\0\u2d8c\0\u2dc1\0\u2df6"+
    "\0\u2e2b\0\u2e60\0\u2e95\0\u2eca\0\u2eff\0\u2f34\0\u2f69\0\u2f9e"+
    "\0\u2fd3\0\u3008\0\u303d\0\u3072\0\u30a7\0\u30dc\0\u3111\0\u1fad"+
    "\0\u3146\0\u317b\0\u31b0\0\u31e5\0\u321a\0\u324f\0\u3284\0\u32b9"+
    "\0\u32ee\0\u3323\0\u3358\0\u338d\0\u0af9\0\u33c2\0\u33f7\0\u342c"+
    "\0\u3461\0\u3496\0\u34cb\0\u3500\0\u3535\0\u356a\0\u359f\0\u35d4"+
    "\0\u3609\0\u363e\0\u3673\0\u36a8\0\u36dd\0\u3712\0\u3747\0\u377c"+
    "\0\u37b1\0\u37e6\0\u381b\0\u3850\0\u3885\0\u38ba\0\u38ef\0\u3924"+
    "\0\u3959\0\u398e\0\u39c3\0\u39f8\0\u3a2d\0\u3a62\0\u3a97\0\u3acc"+
    "\0\u3b01\0\u3b36\0\u3b6b\0\u3ba0\0\u3bd5\0\u3c0a\0\u3c3f\0\u3c74"+
    "\0\u3ca9\0\u3cde\0\u3d13\0\u3d48\0\u3d7d\0\u3db2\0\u3de7\0\u3e1c"+
    "\0\u3e51\0\u3e86\0\u3ebb\0\u3ef0\0\u3f25\0\u3f5a\0\u3f8f\0\u3fc4"+
    "\0\u3ff9\0\u402e\0\u4063\0\u4098\0\u40cd\0\u4102\0\u4137\0\u416c"+
    "\0\u41a1\0\u41d6\0\u420b\0\u4240\0\u4275\0\u42aa\0\u42df\0\u4314"+
    "\0\u4349\0\u437e\0\u43b3\0\u43e8\0\u441d\0\u4452\0\u4487\0\u44bc"+
    "\0\u44f1\0\u4526\0\u455b\0\u4590\0\u45c5\0\u45fa\0\u462f\0\u4664"+
    "\0\u4699\0\u46ce\0\u4703\0\u4738\0\u476d\0\u47a2\0\u47d7\0\u480c"+
    "\0\u4841\0\u4876\0\u48ab\0\u48e0\0\u4915\0\u494a\0\u497f\0\u49b4"+
    "\0\u49e9\0\u4a1e\0\152\0\u4a53\0\u4a88\0\u4abd\0\u4af2\0\u4b27"+
    "\0\u4b5c\0\u4b91\0\u4bc6\0\u4bfb\0\u4c30\0\u4c65\0\u4c9a\0\u4ccf"+
    "\0\u4d04\0\u4d39\0\u4d6e\0\u4da3\0\u4dd8\0\u4e0d\0\u4e42\0\u4e77"+
    "\0\u4eac\0\u4ee1\0\u4f16\0\u4f4b\0\u4f80\0\u4fb5\0\u4fea\0\u501f"+
    "\0\u5054\0\u5089\0\u50be\0\u50f3\0\u5128\0\u515d\0\u5192\0\u51c7"+
    "\0\u51fc\0\u5231\0\u5266\0\u529b\0\u52d0\0\u5305\0\u533a\0\u536f"+
    "\0\u53a4\0\u53d9\0\u540e\0\u5443\0\u5478\0\u54ad\0\u54e2\0\u5517"+
    "\0\u554c\0\u5581\0\u55b6\0\u55eb\0\u5620\0\u5655\0\u568a\0\u56bf"+
    "\0\u56f4\0\u5729\0\u575e\0\u5793\0\u57c8\0\u57fd\0\u5832\0\u5867"+
    "\0\u589c\0\u58d1\0\u5906\0\u593b\0\u5970\0\u59a5\0\u59da\0\u5a0f"+
    "\0\u5a44\0\u5a79\0\u5aae\0\u5ae3\0\u5b18\0\u5b4d\0\u5b82\0\u5bb7"+
    "\0\u5bec\0\u5c21\0\u5c56\0\u5c8b\0\u5cc0\0\u5cf5\0\u5d2a\0\u5d5f"+
    "\0\u5d94\0\u5dc9\0\u5dfe\0\u5e33\0\u5e68\0\u5e9d\0\u5ed2\0\u5f07"+
    "\0\u5f3c\0\u5f71\0\u5fa6\0\u5fdb\0\u6010\0\u6045\0\u607a\0\u60af"+
    "\0\u60e4\0\u6119\0\u614e\0\u6183\0\u61b8\0\u61ed\0\u6222\0\u6257"+
    "\0\u628c\0\u62c1\0\u62f6\0\u632b\0\u6360\0\u6395\0\u63ca\0\u63ff"+
    "\0\u6434\0\u6469\0\u649e\0\u64d3\0\u6508\0\u653d\0\u6572\0\u65a7"+
    "\0\u65dc\0\u6611\0\u6646\0\u667b\0\u66b0\0\u66e5\0\u671a\0\u674f"+
    "\0\u6784\0\152\0\u67b9\0\152\0\u67ee\0\u6823\0\u6858\0\u688d"+
    "\0\u68c2\0\u68f7\0\u692c\0\u6961\0\u6996\0\u69cb\0\u6a00\0\u6a35"+
    "\0\u6a6a\0\u6a9f\0\u6ad4\0\u6b09\0\u6b3e\0\u6b73\0\u6ba8\0\u6bdd"+
    "\0\u6c12\0\u6c47\0\u6c7c\0\u6cb1\0\u6ce6\0\u6d1b\0\u6d50\0\u6d85"+
    "\0\u6dba\0\u6def\0\u6e24\0\u6e59\0\u6e8e\0\u6ec3\0\u6ef8\0\u6f2d"+
    "\0\u6f62\0\u6f97\0\u6fcc\0\u7001\0\u7036\0\u706b\0\u70a0\0\u70d5"+
    "\0\u710a\0\u713f\0\u7174\0\u71a9\0\u71de\0\u7213\0\u7248\0\u727d"+
    "\0\u72b2\0\u72e7\0\u731c\0\u7351\0\u7386\0\u73bb\0\u73f0\0\u7425"+
    "\0\u745a\0\u748f\0\u74c4\0\u74f9\0\u674f\0\u752e\0\u7563\0\u7598"+
    "\0\u75cd\0\u7602\0\u7637\0\u766c\0\u76a1\0\u76d6\0\u770b\0\u7740"+
    "\0\u7775\0\u77aa\0\u77df\0\u7814\0\u7849\0\u787e\0\u78b3\0\u78e8"+
    "\0\u791d\0\u7952\0\u7987\0\u79bc\0\u79f1\0\u7a26\0\u7a5b\0\u7a90"+
    "\0\u7ac5\0\u7afa\0\u7b2f\0\u7b64\0\u7b99\0\u7bce\0\u7c03\0\u7c38"+
    "\0\u7c6d\0\u7ca2\0\u7cd7\0\u7d0c\0\u7d41\0\u7d76\0\u7dab\0\u7de0"+
    "\0\u7e15\0\u7e4a\0\u7e7f\0\u7eb4\0\u7ee9\0\u7f1e\0\u7f53\0\u7f88"+
    "\0\u7fbd\0\u5e33\0\u7ff2\0\u8027\0\u805c\0\u8091\0\u80c6\0\u80fb"+
    "\0\u8130\0\u8165\0\u819a\0\u81cf\0\u8204\0\u8239\0\u826e\0\u82a3"+
    "\0\u82d8\0\u830d\0\u8342\0\u8377\0\u83ac\0\u83e1\0\u8416\0\u844b"+
    "\0\u8480\0\u84b5\0\u84ea\0\u851f\0\u8554\0\u8589\0\u85be\0\u85f3"+
    "\0\u8628\0\u865d\0\u8692\0\u86c7\0\u86fc\0\u8731\0\u8766\0\u879b"+
    "\0\u87d0\0\u8805\0\u883a\0\u886f\0\u88a4\0\u88d9\0\u890e\0\u8943"+
    "\0\u8978\0\u89ad\0\u89e2\0\u8a17\0\u8a4c\0\u8a81\0\u8ab6\0\u8aeb"+
    "\0\u8b20\0\u8b55\0\u8b8a\0\u8bbf\0\u8bf4\0\u8c29\0\u8c5e\0\u8c93"+
    "\0\u8cc8\0\u8cfd\0\u8d32\0\u8d67\0\u8d9c\0\u8dd1\0\u8e06\0\u8e3b"+
    "\0\u7386\0\u8e70\0\u8ea5\0\u8eda\0\u8f0f\0\u8f44\0\u8f79\0\u8fae"+
    "\0\u8fe3\0\u9018\0\u904d\0\u9082\0\u90b7\0\u90ec\0\u9121\0\u9156"+
    "\0\u918b\0\u91c0\0\u91f5\0\u922a\0\u925f\0\u9294\0\u92c9\0\u92fe"+
    "\0\u9333\0\u9368\0\u939d\0\u93d2\0\u9407\0\u943c\0\u9471\0\u94a6"+
    "\0\u94db\0\u9510\0\u9545\0\u957a\0\u95af\0\u95e4\0\u9619\0\u964e"+
    "\0\u9683\0\u96b8\0\u96ed\0\u9722\0\u9757\0\u978c\0\u97c1\0\u97f6"+
    "\0\u982b\0\u9860\0\u9895\0\u98ca\0\u98ff\0\u9934\0\u9969\0\u999e"+
    "\0\u99d3\0\u9a08\0\u9a3d\0\u9a72\0\u9aa7\0\u9adc\0\u9b11\0\u9b46"+
    "\0\u9b7b\0\u9bb0\0\u9be5\0\u9c1a\0\u9c4f\0\u9c84\0\u9cb9\0\u9cee"+
    "\0\u9d23\0\u9d58\0\u9d8d\0\u9dc2\0\u9df7\0\u9e2c\0\u9e61\0\u9e96"+
    "\0\u9ecb\0\u9f00\0\u9f35\0\u9f6a\0\u9f9f\0\u9fd4\0\ua009\0\ua03e"+
    "\0\ua073\0\ua0a8\0\ua0dd\0\ua112\0\ua147\0\ua17c\0\ua1b1\0\ua1e6"+
    "\0\ua21b\0\ua250\0\ua285\0\ua2ba\0\ua2ef\0\u9f9f\0\ua324\0\ua359"+
    "\0\ua38e\0\ua3c3\0\ua3f8\0\ua42d\0\ua462\0\ua497\0\ua4cc\0\ua501"+
    "\0\ua536\0\ua56b\0\ua5a0\0\ua5d5\0\ua60a\0\ua63f\0\ua674\0\ua6a9"+
    "\0\ua6de\0\ua713\0\ua748\0\ua77d\0\ua7b2\0\ua7e7\0\ua81c\0\ua851"+
    "\0\ua886\0\ua8bb\0\ua8f0\0\ua925\0\ua95a";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[845];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\3\2\4\1\5\1\6\1\4\1\5\1\7\1\10"+
    "\1\3\1\11\2\4\1\12\1\5\1\3\1\13\1\14"+
    "\1\4\1\15\1\16\1\17\1\20\1\4\1\21\1\22"+
    "\1\23\1\24\1\25\2\3\1\25\1\17\1\3\1\26"+
    "\1\27\1\30\1\17\1\31\1\32\1\33\1\4\1\34"+
    "\1\4\1\14\1\35\5\4\1\5\1\17\10\36\1\37"+
    "\17\36\1\40\11\36\1\41\3\36\1\42\16\36\66\0"+
    "\6\4\2\0\1\43\3\4\1\0\1\4\3\0\1\4"+
    "\1\0\1\4\1\0\6\4\6\0\3\4\1\0\6\4"+
    "\1\0\7\4\1\0\3\44\2\5\1\44\1\5\2\0"+
    "\4\44\1\0\1\5\1\0\1\44\1\0\1\44\1\45"+
    "\1\46\1\0\6\44\2\0\1\44\3\0\3\44\1\0"+
    "\6\44\1\0\6\44\1\5\1\0\3\44\2\5\1\44"+
    "\1\5\2\0\4\44\1\0\1\5\1\0\1\44\1\0"+
    "\1\47\1\45\1\46\1\0\6\44\2\0\1\44\3\0"+
    "\3\44\1\0\6\44\1\0\6\44\1\5\1\0\7\50"+
    "\1\51\1\52\1\53\53\50\1\0\6\4\2\0\1\43"+
    "\3\4\1\0\1\4\3\0\1\4\1\0\1\4\1\0"+
    "\5\4\1\54\6\0\3\4\1\0\6\4\1\0\7\4"+
    "\1\0\10\12\1\55\1\56\3\12\1\57\47\12\21\0"+
    "\1\14\32\0\1\14\13\0\2\60\1\0\1\60\7\0"+
    "\1\60\44\0\1\60\2\0\6\4\2\0\1\43\3\4"+
    "\1\0\1\4\3\0\1\61\1\0\1\4\1\0\6\4"+
    "\6\0\3\4\1\0\6\4\1\0\1\62\6\4\2\0"+
    "\6\4\2\0\1\43\3\4\1\0\1\4\3\0\1\4"+
    "\1\0\1\4\1\0\1\4\1\63\4\4\6\0\3\4"+
    "\1\0\2\4\1\64\3\4\1\0\7\4\2\0\6\4"+
    "\2\0\1\43\3\4\1\0\1\4\3\0\1\4\1\0"+
    "\1\4\1\0\3\4\1\65\2\4\6\0\3\4\1\0"+
    "\6\4\1\0\7\4\2\0\6\4\2\0\1\43\3\4"+
    "\1\0\1\4\3\0\1\4\1\0\1\4\1\0\1\4"+
    "\1\66\2\4\1\67\1\4\6\0\3\4\1\0\6\4"+
    "\1\0\7\4\2\0\6\4\2\0\1\43\3\4\1\0"+
    "\1\4\3\0\1\4\1\0\1\4\1\0\6\4\6\0"+
    "\3\4\1\0\2\4\1\70\3\4\1\0\7\4\2\0"+
    "\6\4\2\0\1\43\3\4\1\0\1\4\3\0\1\4"+
    "\1\0\1\71\1\0\1\72\5\4\6\0\3\4\1\0"+
    "\6\4\1\0\7\4\2\0\6\4\2\0\1\43\3\4"+
    "\1\0\1\4\3\0\1\4\1\0\1\4\1\0\3\4"+
    "\1\73\2\4\6\0\3\4\1\0\6\4\1\0\7\4"+
    "\2\0\6\4\2\0\1\43\3\4\1\0\1\4\3\0"+
    "\1\4\1\0\1\74\1\0\4\4\1\75\1\4\6\0"+
    "\3\4\1\0\6\4\1\0\7\4\2\0\6\4\2\0"+
    "\1\43\3\4\1\0\1\4\3\0\1\4\1\0\1\4"+
    "\1\0\2\4\1\76\3\4\6\0\3\4\1\0\6\4"+
    "\1\0\7\4\2\0\6\4\2\0\1\43\3\4\1\0"+
    "\1\4\3\0\1\4\1\0\1\4\1\0\3\4\1\77"+
    "\2\4\6\0\3\4\1\0\6\4\1\0\7\4\2\0"+
    "\6\4\2\0\1\43\3\4\1\0\1\4\3\0\1\4"+
    "\1\0\1\4\1\0\6\4\6\0\3\4\1\0\2\4"+
    "\1\100\3\4\1\0\7\4\2\0\6\4\2\0\1\43"+
    "\1\4\1\101\1\4\1\0\1\4\3\0\1\4\1\0"+
    "\1\4\1\0\6\4\6\0\1\4\1\102\1\4\1\0"+
    "\6\4\1\0\7\4\2\0\6\4\2\0\1\43\3\4"+
    "\1\0\1\4\3\0\1\4\1\0\1\103\1\0\3\4"+
    "\1\104\2\4\6\0\3\4\1\0\6\4\1\0\7\4"+
    "\2\0\6\4\2\0\1\43\3\4\1\0\1\4\3\0"+
    "\1\4\1\0\1\4\1\0\3\4\1\105\2\4\6\0"+
    "\3\4\1\0\6\4\1\0\7\4\1\0\10\36\1\0"+
    "\17\36\1\0\11\36\1\0\3\36\1\0\16\36\26\0"+
    "\1\106\15\0\1\107\46\0\1\110\104\0\1\111\30\0"+
    "\1\112\52\0\7\44\2\0\4\44\1\0\1\44\1\0"+
    "\1\44\1\0\1\44\1\0\1\44\1\0\6\44\2\0"+
    "\1\44\3\0\3\44\1\0\6\44\1\0\7\44\1\0"+
    "\3\44\2\113\1\44\1\113\2\0\4\44\1\0\1\113"+
    "\1\0\1\44\1\0\1\44\1\0\1\44\1\114\6\44"+
    "\2\0\1\44\1\0\1\114\1\0\3\44\1\0\6\44"+
    "\1\0\6\44\1\113\1\0\3\44\4\115\2\0\3\44"+
    "\1\115\1\0\1\115\1\0\1\44\1\0\1\44\1\0"+
    "\1\115\1\0\2\44\2\115\2\44\2\0\1\44\3\0"+
    "\3\44\1\0\1\44\1\115\2\44\1\115\1\44\1\0"+
    "\6\44\1\115\1\0\7\116\1\117\1\0\54\116\7\0"+
    "\1\117\55\0\4\116\1\120\1\116\1\121\1\122\1\0"+
    "\1\50\1\123\3\50\1\120\7\116\3\50\32\116\1\120"+
    "\1\116\1\0\6\4\2\0\1\43\3\4\1\0\1\4"+
    "\3\0\1\4\1\0\1\4\1\0\3\4\1\124\2\4"+
    "\6\0\3\4\1\0\6\4\1\0\7\4\1\0\11\55"+
    "\1\125\3\55\1\126\53\55\1\12\1\55\2\12\1\0"+
    "\1\12\1\127\4\12\7\55\3\12\32\55\1\12\1\55"+
    "\3\44\2\60\1\44\1\60\2\0\4\44\1\0\1\60"+
    "\1\0\1\44\1\0\1\44\1\0\1\46\1\0\6\44"+
    "\2\0\1\44\3\0\3\44\1\0\6\44\1\0\6\44"+
    "\1\60\2\0\6\4\2\0\1\43\3\4\1\0\1\4"+
    "\3\0\1\4\1\0\1\130\1\0\6\4\6\0\3\4"+
    "\1\0\6\4\1\0\7\4\2\0\6\4\2\0\1\43"+
    "\3\4\1\0\1\4\3\0\1\4\1\0\1\131\1\0"+
    "\6\4\6\0\3\4\1\0\6\4\1\0\7\4\2\0"+
    "\6\4\2\0\1\43\1\132\2\4\1\0\1\4\3\0"+
    "\1\4\1\0\1\4\1\0\6\4\6\0\2\4\1\133"+
    "\1\0\6\4\1\0\7\4\2\0\6\4\2\0\1\43"+
    "\3\4\1\0\1\4\3\0\1\4\1\0\1\4\1\0"+
    "\6\4\6\0\3\4\1\0\6\4\1\134\7\4\2\0"+
    "\6\4\2\0\1\43\3\4\1\0\1\4\3\0\1\4"+
    "\1\0\1\4\1\0\4\4\1\135\1\4\6\0\3\4"+
    "\1\0\6\4\1\0\7\4\2\0\6\4\2\0\1\43"+
    "\3\4\1\0\1\4\3\0\1\4\1\0\1\4\1\0"+
    "\6\4\6\0\3\4\1\0\5\4\1\136\1\0\7\4"+
    "\2\0\6\4\2\0\1\43\3\4\1\0\1\4\3\0"+
    "\1\4\1\0\1\4\1\0\6\4\6\0\2\4\1\137"+
    "\1\0\6\4\1\0\7\4\2\0\6\4\2\0\1\43"+
    "\3\4\1\0\1\4\3\0\1\4\1\0\1\4\1\0"+
    "\6\4\6\0\3\4\1\0\2\4\1\140\3\4\1\0"+
    "\7\4\2\0\6\4\2\0\1\43\1\4\1\141\1\4"+
    "\1\0\1\4\3\0\1\4\1\0\1\4\1\0\6\4"+
    "\6\0\3\4\1\0\6\4\1\0\7\4\2\0\6\4"+
    "\2\0\1\43\3\4\1\0\1\4\3\0\1\4\1\0"+
    "\1\4\1\0\6\4\6\0\3\4\1\0\2\4\1\142"+
    "\3\4\1\0\7\4\2\0\6\4\2\0\1\43\3\4"+
    "\1\0\1\4\3\0\1\4\1\0\1\4\1\0\5\4"+
    "\1\143\6\0\3\4\1\0\6\4\1\0\1\144\6\4"+
    "\2\0\6\4\2\0\1\43\3\4\1\0\1\4\3\0"+
    "\1\4\1\0\1\4\1\0\1\4\1\145\4\4\6\0"+
    "\3\4\1\0\6\4\1\0\7\4\2\0\6\4\2\0"+
    "\1\43\3\4\1\0\1\4\3\0\1\4\1\0\1\4"+
    "\1\0\3\4\1\146\2\4\6\0\3\4\1\0\6\4"+
    "\1\0\7\4\2\0\6\4\2\0\1\43\3\4\1\0"+
    "\1\4\3\0\1\4\1\0\1\4\1\0\6\4\6\0"+
    "\3\4\1\0\6\4\1\147\7\4\2\0\6\4\2\0"+
    "\1\43\3\4\1\0\1\4\3\0\1\4\1\0\1\4"+
    "\1\0\6\4\6\0\2\4\1\150\1\0\6\4\1\0"+
    "\7\4\2\0\6\4\2\0\1\43\1\4\1\151\1\4"+
    "\1\0\1\4\3\0\1\4\1\0\1\4\1\0\6\4"+
    "\6\0\3\4\1\0\3\4\1\152\2\4\1\0\7\4"+
    "\2\0\6\4\2\0\1\43\3\4\1\0\1\4\3\0"+
    "\1\4\1\0\1\4\1\0\6\4\6\0\3\4\1\0"+
    "\6\4\1\153\7\4\2\0\6\4\2\0\1\43\3\4"+
    "\1\0\1\4\3\0\1\4\1\0\1\4\1\0\1\154"+
    "\5\4\6\0\3\4\1\0\6\4\1\0\7\4\2\0"+
    "\6\4\2\0\1\43\3\4\1\0\1\4\3\0\1\4"+
    "\1\0\1\4\1\0\5\4\1\155\6\0\3\4\1\0"+
    "\6\4\1\0\7\4\2\0\6\4\2\0\1\43\3\4"+
    "\1\0\1\4\3\0\1\4\1\0\1\4\1\0\6\4"+
    "\6\0\3\4\1\0\3\4\1\156\2\4\1\0\7\4"+
    "\2\0\6\4\2\0\1\43\3\4\1\0\1\4\3\0"+
    "\1\4\1\0\1\4\1\0\1\4\1\157\4\4\6\0"+
    "\3\4\1\0\6\4\1\0\7\4\44\0\1\160\53\0"+
    "\1\161\60\0\1\162\104\0\1\163\21\0\4\164\5\0"+
    "\1\164\1\0\1\164\5\0\1\164\3\0\2\164\15\0"+
    "\1\164\2\0\1\164\10\0\1\164\1\0\3\44\2\113"+
    "\1\44\1\113\2\0\4\44\1\0\1\113\1\0\1\44"+
    "\1\0\1\44\1\0\1\44\1\0\6\44\2\0\1\44"+
    "\3\0\3\44\1\0\6\44\1\0\6\44\1\113\4\0"+
    "\2\113\1\0\1\113\7\0\1\113\44\0\1\113\1\0"+
    "\7\116\1\51\1\0\60\116\1\121\1\116\1\121\1\117"+
    "\1\0\5\116\1\121\44\116\1\121\5\116\1\50\1\116"+
    "\1\50\1\117\1\0\5\116\1\50\44\116\1\50\4\116"+
    "\4\165\1\51\1\0\3\116\1\165\1\116\1\165\5\116"+
    "\1\165\3\116\2\165\15\116\1\165\2\116\1\165\10\116"+
    "\1\165\1\116\1\0\6\4\2\0\1\43\3\4\1\0"+
    "\1\4\3\0\1\4\1\0\1\4\1\0\6\4\6\0"+
    "\3\4\1\0\5\4\1\166\1\0\7\4\1\0\10\55"+
    "\1\0\57\55\4\167\2\55\1\125\2\55\1\167\1\126"+
    "\1\167\5\55\1\167\3\55\2\167\15\55\1\167\2\55"+
    "\1\167\10\55\1\167\1\55\1\0\6\4\2\0\1\43"+
    "\3\4\1\0\1\4\3\0\1\4\1\0\1\4\1\0"+
    "\6\4\6\0\3\4\1\0\1\4\1\170\4\4\1\0"+
    "\7\4\2\0\6\4\2\0\1\43\3\4\1\0\1\4"+
    "\3\0\1\4\1\0\1\4\1\0\1\4\1\171\4\4"+
    "\6\0\3\4\1\0\6\4\1\0\7\4\2\0\6\4"+
    "\2\0\1\43\3\4\1\0\1\4\3\0\1\4\1\0"+
    "\1\172\1\0\6\4\6\0\3\4\1\0\6\4\1\0"+
    "\7\4\2\0\6\4\2\0\1\43\3\4\1\0\1\4"+
    "\3\0\1\4\1\0\1\4\1\0\6\4\6\0\3\4"+
    "\1\0\5\4\1\173\1\0\7\4\44\0\1\174\22\0"+
    "\6\4\2\0\1\43\3\4\1\0\1\4\3\0\1\4"+
    "\1\0\1\4\1\0\5\4\1\132\6\0\3\4\1\0"+
    "\6\4\1\0\7\4\2\0\6\4\2\0\1\43\3\4"+
    "\1\0\1\4\3\0\1\4\1\0\1\4\1\0\6\4"+
    "\6\0\3\4\1\0\6\4\1\175\7\4\2\0\6\4"+
    "\2\0\1\43\3\4\1\0\1\4\3\0\1\4\1\0"+
    "\1\4\1\0\3\4\1\176\2\4\6\0\3\4\1\0"+
    "\6\4\1\0\7\4\2\0\6\4\2\0\1\43\3\4"+
    "\1\0\1\4\3\0\1\4\1\0\1\4\1\0\6\4"+
    "\6\0\1\4\1\177\1\4\1\0\6\4\1\0\7\4"+
    "\2\0\6\4\2\0\1\43\3\4\1\0\1\4\3\0"+
    "\1\4\1\0\1\4\1\0\6\4\6\0\3\4\1\0"+
    "\4\4\1\200\1\4\1\0\7\4\2\0\6\4\2\0"+
    "\1\43\3\4\1\0\1\4\3\0\1\4\1\0\1\4"+
    "\1\0\6\4\6\0\1\4\1\201\1\4\1\0\6\4"+
    "\1\0\7\4\2\0\6\4\2\0\1\43\1\4\1\202"+
    "\1\4\1\0\1\4\3\0\1\4\1\0\1\4\1\0"+
    "\6\4\6\0\3\4\1\0\6\4\1\203\7\4\2\0"+
    "\6\4\2\0\1\43\3\4\1\0\1\4\3\0\1\4"+
    "\1\0\1\204\1\0\6\4\6\0\3\4\1\0\6\4"+
    "\1\0\7\4\2\0\6\4\2\0\1\43\3\4\1\0"+
    "\1\4\3\0\1\4\1\0\1\4\1\0\6\4\6\0"+
    "\3\4\1\0\3\4\1\205\2\4\1\0\7\4\2\0"+
    "\6\4\2\0\1\43\3\4\1\0\1\4\3\0\1\4"+
    "\1\0\1\4\1\0\6\4\6\0\3\4\1\0\6\4"+
    "\1\0\1\4\1\206\5\4\50\0\1\207\16\0\6\4"+
    "\2\0\1\43\3\4\1\0\1\4\3\0\1\4\1\0"+
    "\1\4\1\0\1\210\5\4\6\0\3\4\1\0\6\4"+
    "\1\0\7\4\2\0\6\4\2\0\1\43\3\4\1\0"+
    "\1\4\3\0\1\4\1\0\1\4\1\0\5\4\1\211"+
    "\6\0\3\4\1\0\6\4\1\0\7\4\2\0\6\4"+
    "\2\0\1\43\3\4\1\0\1\4\3\0\1\4\1\0"+
    "\1\4\1\0\6\4\6\0\3\4\1\0\3\4\1\212"+
    "\2\4\1\0\7\4\13\0\1\213\1\0\1\214\5\0"+
    "\1\215\1\0\1\216\1\0\1\217\1\220\1\221\1\222"+
    "\1\223\1\224\6\0\1\225\1\226\1\227\1\0\1\230"+
    "\1\231\1\232\1\233\1\234\1\235\1\0\1\236\1\0"+
    "\1\237\1\240\1\241\1\242\3\0\6\4\2\0\1\43"+
    "\3\4\1\0\1\4\3\0\1\4\1\0\1\4\1\0"+
    "\6\4\6\0\2\4\1\243\1\0\6\4\1\0\7\4"+
    "\2\0\6\4\2\0\1\43\3\4\1\0\1\4\3\0"+
    "\1\4\1\0\1\4\1\0\6\4\6\0\3\4\1\0"+
    "\1\4\1\244\4\4\1\0\7\4\2\0\6\4\2\0"+
    "\1\43\3\4\1\0\1\4\3\0\1\4\1\0\1\4"+
    "\1\0\3\4\1\245\2\4\6\0\3\4\1\0\6\4"+
    "\1\0\7\4\2\0\6\4\2\0\1\43\3\4\1\0"+
    "\1\4\3\0\1\4\1\0\1\4\1\0\6\4\6\0"+
    "\2\4\1\246\1\0\6\4\1\0\7\4\46\0\1\247"+
    "\43\0\1\160\103\0\1\250\44\0\1\251\44\0\4\252"+
    "\5\0\1\252\1\0\1\252\5\0\1\252\3\0\2\252"+
    "\15\0\1\252\2\0\1\252\10\0\1\252\1\0\3\116"+
    "\4\253\1\51\1\0\3\116\1\253\1\116\1\253\5\116"+
    "\1\253\3\116\2\253\15\116\1\253\2\116\1\253\10\116"+
    "\1\253\1\116\1\0\6\4\2\0\1\43\3\4\1\0"+
    "\1\4\3\0\1\4\1\0\1\254\1\0\6\4\6\0"+
    "\3\4\1\0\6\4\1\0\7\4\1\0\3\55\4\255"+
    "\2\55\1\125\2\55\1\255\1\126\1\255\5\55\1\255"+
    "\3\55\2\255\15\55\1\255\2\55\1\255\10\55\1\255"+
    "\1\55\1\0\6\4\2\0\1\43\1\256\2\4\1\0"+
    "\1\4\3\0\1\4\1\0\1\4\1\0\6\4\6\0"+
    "\3\4\1\0\6\4\1\0\7\4\2\0\6\4\2\0"+
    "\1\43\3\4\1\0\1\4\3\0\1\4\1\0\1\4"+
    "\1\0\6\4\6\0\3\4\1\0\6\4\1\0\1\4"+
    "\1\254\5\4\2\0\6\4\2\0\1\43\3\4\1\0"+
    "\1\4\3\0\1\4\1\0\1\4\1\0\6\4\6\0"+
    "\3\4\1\0\5\4\1\257\1\0\7\4\33\0\1\260"+
    "\35\0\1\261\2\0\1\261\7\0\1\261\44\0\1\262"+
    "\2\0\6\4\2\0\1\43\3\4\1\0\1\4\3\0"+
    "\1\4\1\0\1\4\1\0\5\4\1\263\6\0\3\4"+
    "\1\0\6\4\1\0\7\4\2\0\6\4\2\0\1\43"+
    "\3\4\1\0\1\4\3\0\1\4\1\0\1\4\1\264"+
    "\6\4\6\0\3\4\1\0\6\4\1\0\7\4\2\0"+
    "\6\4\2\0\1\43\3\4\1\0\1\4\3\0\1\4"+
    "\1\0\1\4\1\0\6\4\6\0\3\4\1\0\6\4"+
    "\1\265\7\4\2\0\6\4\1\266\1\0\1\43\3\4"+
    "\1\0\1\4\3\0\1\4\1\0\1\4\1\0\6\4"+
    "\6\0\3\4\1\0\6\4\1\0\7\4\44\0\1\267"+
    "\22\0\6\4\2\0\1\43\3\4\1\0\1\4\3\0"+
    "\1\4\1\0\1\4\1\0\6\4\6\0\3\4\1\0"+
    "\6\4\1\203\7\4\2\0\6\4\2\0\1\43\3\4"+
    "\1\0\1\4\3\0\1\4\1\0\1\4\1\0\6\4"+
    "\6\0\2\4\1\270\1\0\6\4\1\0\7\4\2\0"+
    "\6\4\2\0\1\43\3\4\1\0\1\4\3\0\1\4"+
    "\1\0\1\271\1\0\6\4\6\0\3\4\1\0\6\4"+
    "\1\0\7\4\51\0\1\272\15\0\6\4\2\0\1\43"+
    "\3\4\1\0\1\4\3\0\1\4\1\0\1\4\1\0"+
    "\6\4\6\0\3\4\1\0\2\4\1\273\3\4\1\0"+
    "\7\4\2\0\6\4\2\0\1\43\3\4\1\0\1\4"+
    "\3\0\1\4\1\0\1\4\1\0\3\4\1\274\2\4"+
    "\6\0\3\4\1\0\6\4\1\0\7\4\14\0\1\275"+
    "\63\0\1\276\11\0\1\277\2\0\1\300\2\0\1\301"+
    "\75\0\1\302\34\0\1\303\6\0\1\304\66\0\1\305"+
    "\2\0\1\306\1\0\1\307\10\0\1\310\5\0\1\311"+
    "\40\0\1\312\17\0\1\313\32\0\1\314\16\0\1\315"+
    "\1\316\11\0\1\317\3\0\1\320\27\0\1\321\75\0"+
    "\1\322\17\0\1\323\3\0\1\324\27\0\1\325\10\0"+
    "\1\326\1\0\1\327\13\0\1\330\1\331\1\332\2\0"+
    "\1\333\1\0\1\334\5\0\1\335\17\0\1\336\11\0"+
    "\1\337\67\0\1\340\2\0\1\341\7\0\1\342\1\0"+
    "\1\343\3\0\1\344\42\0\1\345\24\0\1\346\35\0"+
    "\1\347\4\0\1\350\16\0\1\351\43\0\1\352\1\0"+
    "\1\353\1\237\7\0\1\354\5\0\1\355\43\0\1\356"+
    "\101\0\1\357\44\0\1\360\2\0\1\361\1\0\1\362"+
    "\12\0\1\363\47\0\1\364\1\0\1\365\57\0\1\366"+
    "\104\0\1\367\70\0\1\370\64\0\1\371\26\0\1\372"+
    "\53\0\6\4\2\0\1\43\3\4\1\0\1\4\3\0"+
    "\1\4\1\0\1\4\1\0\6\4\6\0\3\4\1\0"+
    "\2\4\1\373\3\4\1\0\7\4\2\0\6\4\2\0"+
    "\1\43\3\4\1\0\1\4\3\0\1\4\1\0\1\4"+
    "\1\0\1\4\1\374\4\4\6\0\3\4\1\0\6\4"+
    "\1\0\7\4\2\0\6\4\2\0\1\43\3\4\1\0"+
    "\1\4\3\0\1\4\1\0\1\4\1\0\6\4\6\0"+
    "\3\4\1\0\5\4\1\375\1\0\7\4\2\0\6\4"+
    "\2\0\1\43\3\4\1\0\1\4\3\0\1\4\1\0"+
    "\1\4\1\0\3\4\1\376\2\4\6\0\3\4\1\0"+
    "\6\4\1\0\7\4\42\0\1\377\56\0\1\160\11\0"+
    "\1\247\20\0\1\251\1\u0100\4\251\1\u0100\2\0\3\251"+
    "\1\0\1\251\1\0\1\u0100\1\0\1\251\1\u0100\1\251"+
    "\1\u0100\6\251\1\0\4\u0100\4\251\1\u0100\6\251\1\0"+
    "\7\251\1\u0100\3\0\4\u0101\5\0\1\u0101\1\0\1\u0101"+
    "\5\0\1\u0101\3\0\2\u0101\15\0\1\u0101\2\0\1\u0101"+
    "\10\0\1\u0101\1\0\3\116\4\u0102\1\51\1\0\3\116"+
    "\1\u0102\1\116\1\u0102\5\116\1\u0102\3\116\2\u0102\15\116"+
    "\1\u0102\2\116\1\u0102\10\116\1\u0102\1\116\3\55\4\u0103"+
    "\2\55\1\125\2\55\1\u0103\1\126\1\u0103\5\55\1\u0103"+
    "\3\55\2\u0103\15\55\1\u0103\2\55\1\u0103\10\55\1\u0103"+
    "\1\55\1\0\6\4\2\0\1\43\3\4\1\0\1\4"+
    "\3\0\1\4\1\0\1\4\1\0\1\u0104\5\4\6\0"+
    "\3\4\1\0\6\4\1\0\7\4\2\0\6\4\2\0"+
    "\1\43\3\4\1\0\1\4\3\0\1\4\1\0\1\u0105"+
    "\1\0\6\4\6\0\3\4\1\0\6\4\1\0\7\4"+
    "\32\0\1\u0106\37\0\1\261\61\0\6\4\2\0\1\43"+
    "\3\4\1\0\1\4\3\0\1\4\1\0\1\u0107\1\0"+
    "\6\4\6\0\3\4\1\0\6\4\1\0\7\4\44\0"+
    "\1\u0108\53\0\1\u0109\60\0\1\u010a\62\0\1\u010b\41\0"+
    "\6\4\2\0\1\43\3\4\1\0\1\4\3\0\1\4"+
    "\1\0\1\4\1\0\5\4\1\u010c\6\0\3\4\1\0"+
    "\6\4\1\0\7\4\2\0\6\4\2\0\1\43\3\4"+
    "\1\0\1\4\3\0\1\4\1\0\1\4\1\0\1\4"+
    "\1\u010d\4\4\6\0\3\4\1\0\6\4\1\0\7\4"+
    "\52\0\1\u010e\14\0\6\4\2\0\1\43\3\4\1\0"+
    "\1\4\3\0\1\4\1\0\1\4\1\0\4\4\1\u010f"+
    "\1\4\6\0\3\4\1\0\6\4\1\0\7\4\2\0"+
    "\6\4\2\0\1\43\1\4\1\u0110\1\4\1\0\1\4"+
    "\3\0\1\4\1\0\1\4\1\0\6\4\6\0\3\4"+
    "\1\0\6\4\1\0\7\4\26\0\1\u0111\1\u0112\65\0"+
    "\1\u0113\17\0\1\u0114\61\0\1\u0115\5\0\1\u0116\36\0"+
    "\1\u0117\110\0\1\u0118\40\0\1\u0119\27\0\1\u011a\36\0"+
    "\1\u011b\23\0\1\u011c\55\0\1\u011d\1\u011e\52\0\1\u011f"+
    "\76\0\1\u0120\47\0\1\u0121\21\0\1\u0122\42\0\1\u0123"+
    "\105\0\1\u0124\2\0\1\u0125\44\0\1\u0126\16\0\1\u0127"+
    "\65\0\1\u0128\35\0\1\u0129\112\0\1\u0122\62\0\1\u012a"+
    "\43\0\1\u012b\3\0\1\u012c\60\0\1\u012d\20\0\1\u012e"+
    "\72\0\1\u012f\36\0\1\u0130\1\u0131\23\0\1\u0132\62\0"+
    "\1\u0133\64\0\1\u0134\35\0\1\u0135\67\0\1\u0136\61\0"+
    "\1\u0137\64\0\1\u0138\23\0\1\u0139\43\0\1\u013a\1\0"+
    "\1\u013b\106\0\1\u013c\40\0\1\u013d\61\0\1\u013e\67\0"+
    "\1\u013f\50\0\1\u0140\102\0\1\u0141\1\u0142\102\0\1\u0143"+
    "\45\0\1\u0144\111\0\1\u0145\41\0\1\u0146\13\0\1\u0147"+
    "\3\0\1\u0148\40\0\1\u0149\61\0\1\u014a\53\0\1\u014b"+
    "\102\0\1\u014c\65\0\1\u014d\61\0\1\u014e\61\0\1\u014f"+
    "\4\0\1\u0150\46\0\1\u0151\63\0\1\u0152\16\0\1\u0153"+
    "\46\0\1\u0154\35\0\1\u0155\37\0\1\u0156\53\0\1\u0122"+
    "\102\0\1\u0157\1\0\1\u0158\101\0\1\u0120\65\0\1\u0159"+
    "\46\0\1\u015a\101\0\1\u015b\65\0\1\u015c\55\0\1\u015d"+
    "\71\0\1\u015e\61\0\1\u0113\71\0\1\u015f\57\0\1\u0153"+
    "\21\0\6\4\2\0\1\43\1\4\1\u0160\1\4\1\0"+
    "\1\4\3\0\1\4\1\0\1\4\1\0\6\4\6\0"+
    "\3\4\1\0\6\4\1\0\7\4\2\0\6\4\2\0"+
    "\1\43\3\4\1\0\1\4\3\0\1\4\1\0\1\4"+
    "\1\0\6\4\6\0\2\4\1\u0161\1\0\6\4\1\0"+
    "\7\4\2\0\6\4\2\0\1\43\3\4\1\0\1\4"+
    "\3\0\1\4\1\0\1\u0162\1\0\6\4\6\0\3\4"+
    "\1\0\6\4\1\0\7\4\2\0\6\4\2\0\1\43"+
    "\2\4\1\u0163\1\0\1\4\3\0\1\4\1\0\1\4"+
    "\1\0\6\4\6\0\3\4\1\0\6\4\1\0\7\4"+
    "\42\0\1\251\26\0\4\4\5\0\1\4\1\0\1\4"+
    "\5\0\1\4\3\0\2\4\15\0\1\4\2\0\1\4"+
    "\10\0\1\4\1\0\3\116\4\50\1\51\1\0\3\116"+
    "\1\50\1\116\1\50\5\116\1\50\3\116\2\50\15\116"+
    "\1\50\2\116\1\50\10\116\1\50\1\116\3\55\4\12"+
    "\2\55\1\125\2\55\1\12\1\126\1\12\5\55\1\12"+
    "\3\55\2\12\15\55\1\12\2\55\1\12\10\55\1\12"+
    "\1\55\1\0\6\4\2\0\1\43\3\4\1\0\1\4"+
    "\3\0\1\4\1\0\1\u010d\1\0\3\4\1\u0164\2\4"+
    "\6\0\3\4\1\0\6\4\1\0\7\4\2\0\6\4"+
    "\2\0\1\43\3\4\1\0\1\4\3\0\1\4\1\0"+
    "\1\4\1\0\1\4\1\210\4\4\6\0\3\4\1\0"+
    "\6\4\1\0\7\4\57\0\1\u0165\7\0\6\4\2\0"+
    "\1\43\3\4\1\0\1\4\3\0\1\4\1\0\1\4"+
    "\1\0\5\4\1\210\6\0\3\4\1\0\6\4\1\0"+
    "\7\4\33\0\1\u0166\102\0\1\u0167\70\0\1\203\37\0"+
    "\1\u0168\36\0\6\4\2\0\1\43\3\4\1\0\1\4"+
    "\3\0\1\4\1\0\1\4\1\0\5\4\1\u0169\6\0"+
    "\3\4\1\0\6\4\1\0\7\4\52\0\1\u016a\14\0"+
    "\6\4\2\0\1\43\3\4\1\0\1\4\3\0\1\4"+
    "\1\0\1\u010d\1\0\6\4\6\0\3\4\1\0\6\4"+
    "\1\0\7\4\2\0\6\4\2\0\1\43\3\4\1\0"+
    "\1\4\3\0\1\4\1\0\1\4\1\0\6\4\6\0"+
    "\3\4\1\0\4\4\1\u016b\1\4\1\0\7\4\27\0"+
    "\1\u0112\67\0\1\u016c\46\0\1\u016d\130\0\1\u016e\20\0"+
    "\1\u016f\125\0\1\u0170\41\0\1\u0171\102\0\1\u0172\44\0"+
    "\1\u0173\70\0\1\u0174\55\0\1\u0175\17\0\1\u0176\44\0"+
    "\1\u0177\64\0\1\u0119\5\0\1\u0178\60\0\1\u0179\62\0"+
    "\1\u017a\103\0\1\u017b\74\0\1\u017c\35\0\1\u017b\17\0"+
    "\1\u017d\70\0\1\u017e\46\0\1\u017f\105\0\1\u0180\54\0"+
    "\1\u0181\54\0\1\u0182\73\0\1\u0130\54\0\1\u0183\100\0"+
    "\1\u016d\51\0\1\u0184\73\0\1\u016d\73\0\1\u016d\65\0"+
    "\1\u0185\66\0\1\u0186\36\0\1\u0187\113\0\1\u0188\33\0"+
    "\1\u0189\102\0\1\u018a\66\0\1\u018b\6\0\1\u018c\42\0"+
    "\1\u018d\110\0\1\u018e\52\0\1\u018f\45\0\1\u0190\110\0"+
    "\1\u0153\40\0\1\u0191\17\0\1\u0192\66\0\1\u0193\31\0"+
    "\1\u017f\115\0\1\u0194\52\0\1\u0195\76\0\1\u0196\73\0"+
    "\1\u0197\43\0\1\u016d\104\0\1\u0198\72\0\1\u0199\53\0"+
    "\1\u0122\6\0\1\u019a\41\0\1\u019b\57\0\1\u019c\115\0"+
    "\1\u019d\61\0\1\u019e\4\0\1\u019f\31\0\1\u01a0\107\0"+
    "\1\u01a1\57\0\1\u01a2\46\0\1\u01a3\115\0\1\u01a4\37\0"+
    "\1\u01a5\56\0\1\u01a6\4\0\1\u01a7\63\0\1\u0153\110\0"+
    "\1\u01a8\23\0\1\u01a9\77\0\1\u017b\51\0\1\u01aa\65\0"+
    "\1\u01ab\34\0\1\u01ac\67\0\1\u01ad\36\0\1\u01ae\64\0"+
    "\1\u01af\67\0\1\u01b0\76\0\1\u01b1\67\0\1\u017b\42\0"+
    "\1\u01b2\104\0\1\u01b3\77\0\1\u017b\21\0\1\u01b4\51\0"+
    "\6\4\2\0\1\43\3\4\1\0\1\4\3\0\1\4"+
    "\1\0\1\4\1\0\5\4\1\254\6\0\3\4\1\0"+
    "\6\4\1\0\7\4\2\0\6\4\2\0\1\43\3\4"+
    "\1\0\1\4\3\0\1\4\1\0\1\4\1\0\6\4"+
    "\6\0\1\4\1\u01b5\1\4\1\0\6\4\1\0\7\4"+
    "\2\0\6\4\2\0\1\43\3\4\1\0\1\4\3\0"+
    "\1\4\1\0\1\4\1\0\6\4\6\0\3\4\1\0"+
    "\6\4\1\u01b6\7\4\2\0\6\4\2\0\1\43\3\4"+
    "\1\0\1\4\3\0\1\4\1\0\1\4\1\0\4\4"+
    "\1\u01b7\1\4\6\0\3\4\1\0\6\4\1\0\7\4"+
    "\2\0\6\4\2\0\1\43\2\4\1\u01b8\1\0\1\4"+
    "\3\0\1\4\1\0\1\4\1\0\6\4\6\0\3\4"+
    "\1\0\6\4\1\0\7\4\25\0\1\u01b9\71\0\1\u01ba"+
    "\103\0\1\u01bb\65\0\1\u01bc\14\0\6\4\2\0\1\43"+
    "\3\4\1\0\1\4\3\0\1\4\1\0\1\4\1\0"+
    "\6\4\6\0\2\4\1\u01bd\1\0\6\4\1\0\7\4"+
    "\32\0\1\u01be\34\0\6\4\2\0\1\43\3\4\1\0"+
    "\1\4\3\0\1\4\1\0\1\4\1\0\6\4\6\0"+
    "\3\4\1\0\6\4\1\u01bf\7\4\30\0\1\u0121\101\0"+
    "\1\u017d\44\0\1\u01c0\113\0\1\u01c1\35\0\1\u01c2\5\0"+
    "\1\u01c3\111\0\1\u016d\64\0\1\u01c4\51\0\1\u01c5\63\0"+
    "\1\u01c6\50\0\1\u01c7\63\0\1\u01c8\65\0\1\u01c9\105\0"+
    "\1\u01ca\60\0\1\u01cb\7\0\1\u01cc\53\0\1\u01cd\45\0"+
    "\1\u0153\53\0\1\u01ce\117\0\1\u01cf\72\0\1\u01d0\42\0"+
    "\1\u01d1\63\0\1\u01d2\61\0\1\u01d3\112\0\1\u01d4\36\0"+
    "\1\u01d5\112\0\1\u01d6\61\0\1\u01d7\62\0\1\u01d8\4\0"+
    "\1\u01d9\34\0\1\u01da\17\0\1\u01db\52\0\1\u01dc\60\0"+
    "\1\u01dd\51\0\1\u017b\115\0\1\u01de\77\0\1\u01df\31\0"+
    "\1\u01e0\103\0\1\u01e1\10\0\1\u01e2\53\0\1\u01e3\52\0"+
    "\1\u01e4\46\0\1\u01e5\64\0\1\u01e6\114\0\1\u01e7\47\0"+
    "\1\u01e8\101\0\1\u01e9\45\0\1\u01ea\114\0\1\u01eb\34\0"+
    "\1\u01ec\64\0\1\u01ed\104\0\1\u01ee\70\0\1\u01ef\26\0"+
    "\1\u0120\31\0\1\u01f0\7\0\1\u01f1\71\0\1\u019f\34\0"+
    "\1\u0120\64\0\1\u01f2\107\0\1\u01f3\36\0\1\u01f4\100\0"+
    "\1\u01f5\66\0\1\u01f6\7\0\1\u01e2\62\0\1\u01f7\55\0"+
    "\1\u01f8\47\0\1\u01f9\52\0\1\u01fa\127\0\1\u01fb\31\0"+
    "\1\u01fc\52\0\1\u01fd\103\0\1\u01fe\66\0\1\u01ff\73\0"+
    "\1\u017b\51\0\1\u0200\110\0\1\u0201\35\0\1\u0202\111\0"+
    "\1\u0203\2\0\1\u0204\57\0\1\u0205\61\0\1\u0206\21\0"+
    "\6\4\2\0\1\43\3\4\1\0\1\4\3\0\1\4"+
    "\1\0\1\4\1\0\1\u0207\5\4\6\0\3\4\1\0"+
    "\6\4\1\0\7\4\32\0\1\u0208\34\0\6\4\2\0"+
    "\1\43\3\4\1\0\1\4\3\0\1\4\1\0\1\u0160"+
    "\1\0\6\4\6\0\3\4\1\0\6\4\1\0\7\4"+
    "\2\0\6\4\2\0\1\43\3\4\1\0\1\4\3\0"+
    "\1\4\1\0\1\4\1\0\4\4\1\u0209\1\4\6\0"+
    "\3\4\1\0\6\4\1\0\7\4\30\0\1\u020a\113\0"+
    "\1\u020b\51\0\1\u020c\65\0\1\u020d\21\0\6\4\2\0"+
    "\1\43\3\4\1\0\1\4\3\0\1\4\1\0\1\4"+
    "\1\0\6\4\6\0\3\4\1\0\2\4\1\u020e\3\4"+
    "\1\0\7\4\14\0\1\u020f\65\0\1\u0210\27\0\1\u0211"+
    "\46\0\1\u0212\112\0\1\u0213\23\0\1\u0214\75\0\1\u0215"+
    "\114\0\1\u0216\34\0\1\u0217\71\0\1\u0218\77\0\1\u0219"+
    "\7\0\1\u01cc\66\0\1\u021a\57\0\1\u021b\46\0\1\u021c"+
    "\16\0\1\u0122\25\0\1\u021d\102\0\1\u0208\23\0\1\u021e"+
    "\57\0\1\u021f\67\0\1\u017b\55\0\1\u0220\7\0\1\u0221"+
    "\57\0\1\u0222\41\0\1\u0223\17\0\1\u0224\66\0\1\u0113"+
    "\66\0\1\u0225\30\0\1\u0226\124\0\1\u0227\24\0\1\u0228"+
    "\15\0\1\u0229\16\0\1\u022a\63\0\1\u022b\46\0\1\237"+
    "\101\0\1\u01d8\50\0\1\u022c\44\0\1\u022d\125\0\1\u01f1"+
    "\23\0\1\u022e\64\0\1\u022f\125\0\1\u0230\37\0\1\u0231"+
    "\101\0\1\u01f6\70\0\1\u0232\70\0\1\u0233\62\0\1\u017b"+
    "\40\0\1\u01df\102\0\1\u017d\7\0\1\u0234\36\0\1\u0235"+
    "\102\0\1\u0236\7\0\1\u0237\36\0\1\u0231\65\0\1\u0185"+
    "\101\0\1\u0238\67\0\1\u0239\44\0\1\u023a\104\0\1\u023b"+
    "\30\0\1\u023c\64\0\1\u023d\63\0\1\u0120\104\0\1\u023e"+
    "\65\0\1\u0174\6\0\1\u023f\46\0\1\u017b\17\0\1\u0240"+
    "\44\0\1\u0241\53\0\1\u0242\125\0\1\u0243\34\0\1\u0244"+
    "\64\0\1\u0245\17\0\1\u0246\32\0\1\u0247\126\0\1\u0248"+
    "\57\0\1\u0249\50\0\1\u0249\44\0\1\u01e4\122\0\1\u024a"+
    "\25\0\1\u024b\35\0\1\u024c\40\0\1\u024d\17\0\1\u024e"+
    "\33\0\1\u024f\121\0\1\u0250\65\0\1\u0203\45\0\1\u0251"+
    "\56\0\1\u0252\41\0\6\4\2\0\1\43\3\4\1\0"+
    "\1\4\3\0\1\4\1\0\1\4\1\0\6\4\6\0"+
    "\2\4\1\u0253\1\0\6\4\1\0\7\4\55\0\1\u0254"+
    "\11\0\6\4\2\0\1\43\3\4\1\0\1\4\3\0"+
    "\1\4\1\0\1\u0255\1\0\6\4\6\0\3\4\1\0"+
    "\6\4\1\0\7\4\25\0\1\u0256\73\0\1\u0257\32\0"+
    "\6\4\2\0\1\43\1\4\1\u0258\1\4\1\0\1\4"+
    "\3\0\1\4\1\0\1\4\1\0\6\4\6\0\3\4"+
    "\1\0\6\4\1\0\7\4\53\0\1\u020c\44\0\1\u0259"+
    "\65\0\1\u025a\105\0\1\u025b\67\0\1\u025c\33\0\1\u025d"+
    "\67\0\1\u025e\76\0\1\u025f\6\0\1\u0260\25\0\1\u0261"+
    "\117\0\1\u018b\31\0\1\u0262\125\0\1\u0263\41\0\1\u0264"+
    "\77\0\1\u0265\73\0\1\u0245\35\0\1\u0266\67\0\1\u0249"+
    "\50\0\1\u0267\121\0\1\u0268\56\0\1\u0269\76\0\1\u026a"+
    "\23\0\1\u026b\64\0\1\u026c\63\0\1\u026d\104\0\1\u026e"+
    "\25\0\1\u026f\35\0\1\u0241\57\0\1\u0270\64\0\1\u0271"+
    "\115\0\1\u0272\63\0\1\u0273\63\0\1\u0274\55\0\1\u0275"+
    "\73\0\1\u0276\37\0\1\u0277\112\0\1\u0278\23\0\1\u017b"+
    "\41\0\1\u025d\33\0\1\u0279\107\0\1\u0222\1\u027a\70\0"+
    "\1\u027b\23\0\1\u027c\121\0\1\u027d\42\0\1\u027e\64\0"+
    "\1\u027f\112\0\1\u0280\43\0\1\u017b\105\0\1\u0281\63\0"+
    "\1\u0282\65\0\1\u0283\34\0\1\u0284\110\0\1\u018b\43\0"+
    "\1\u017f\110\0\1\u0285\23\0\1\u0286\17\0\1\u0287\1\u0288"+
    "\10\0\1\u0289\47\0\1\u028a\111\0\1\u01cc\23\0\1\u028b"+
    "\115\0\1\u028c\32\0\1\u028d\17\0\1\u028e\10\0\1\u028f"+
    "\7\0\1\u0290\37\0\1\u016d\62\0\1\u0291\107\0\1\u0292"+
    "\73\0\1\u0179\21\0\1\u0293\104\0\1\u026c\103\0\1\u0294"+
    "\36\0\1\u0295\114\0\1\u0296\11\0\6\4\2\0\1\43"+
    "\3\4\1\0\1\4\3\0\1\4\1\0\1\4\1\0"+
    "\6\4\6\0\3\4\1\0\2\4\1\u0297\3\4\1\0"+
    "\7\4\56\0\1\u021e\10\0\6\4\2\0\1\43\3\4"+
    "\1\0\1\4\3\0\1\4\1\0\1\4\1\0\6\4"+
    "\6\0\3\4\1\0\6\4\1\u0298\7\4\30\0\1\u0299"+
    "\70\0\1\u029a\32\0\6\4\2\0\1\43\3\4\1\0"+
    "\1\4\3\0\1\4\1\0\1\4\1\0\6\4\6\0"+
    "\3\4\1\0\6\4\1\u029b\7\4\51\0\1\u029c\27\0"+
    "\1\u029d\75\0\1\u029e\3\0\1\u029f\100\0\1\u02a0\44\0"+
    "\1\u02a1\115\0\1\u026c\51\0\1\342\53\0\1\u02a2\102\0"+
    "\1\u02a3\70\0\1\u02a4\23\0\1\213\13\0\1\u0112\51\0"+
    "\1\u02a5\121\0\1\u02a6\56\0\1\u02a7\75\0\1\u02a8\41\0"+
    "\1\u02a9\65\0\1\u02aa\66\0\1\u02ab\104\0\1\u0223\35\0"+
    "\1\u017b\67\0\1\u018b\105\0\1\u02ac\64\0\1\u02ad\71\0"+
    "\1\u02ae\35\0\1\u01f5\62\0\1\u02af\112\0\1\u02b0\66\0"+
    "\1\u02b1\23\0\1\u02b2\125\0\1\u02ad\60\0\1\u02b3\46\0"+
    "\1\u028e\1\u02b4\62\0\1\u0153\63\0\1\u02b5\66\0\1\u028e"+
    "\11\0\1\u0289\73\0\1\u02b6\41\0\1\u02b7\60\0\1\u02b8"+
    "\104\0\1\u02b9\52\0\1\u02ba\14\0\1\u02bb\10\0\1\240"+
    "\30\0\1\u02bc\2\0\1\u02bd\61\0\1\u01c2\22\0\1\u02be"+
    "\47\0\1\u02bf\106\0\1\u01e2\23\0\1\u02c0\121\0\1\u02c1"+
    "\45\0\1\u02c2\46\0\1\372\125\0\1\u02c3\63\0\1\u0208"+
    "\43\0\1\u02c4\45\0\1\u02c5\121\0\1\u0191\64\0\1\u02c6"+
    "\40\0\1\u02c7\72\0\1\u0249\60\0\1\u02c8\111\0\1\u02c9"+
    "\35\0\1\u017f\114\0\1\u02ca\24\0\1\u02cb\51\0\6\4"+
    "\2\0\1\43\1\4\1\210\1\4\1\0\1\4\3\0"+
    "\1\4\1\0\1\4\1\0\6\4\6\0\3\4\1\0"+
    "\6\4\1\0\7\4\15\0\1\u02cc\124\0\1\147\54\0"+
    "\1\u02cd\64\0\1\u02ce\4\0\1\u02cf\62\0\1\u02d0\24\0"+
    "\1\u02d1\126\0\1\u02d2\57\0\1\u02d3\67\0\1\u02d4\44\0"+
    "\1\u017b\106\0\1\u02d5\37\0\1\u02d6\114\0\1\u02d7\64\0"+
    "\1\u02d8\23\0\1\u02d9\115\0\1\u02da\74\0\1\u0221\64\0"+
    "\1\u02db\23\0\1\u02dc\64\0\1\u02dd\27\0\1\u02de\74\0"+
    "\1\u02ad\55\0\1\u018b\44\0\1\u0124\111\0\1\u02df\37\0"+
    "\1\u02e0\54\0\1\u02e1\123\0\1\u02e2\64\0\1\u02e3\37\0"+
    "\1\u02e4\112\0\1\u02e5\64\0\1\u0237\64\0\1\u02e6\61\0"+
    "\1\u017f\45\0\1\u02e7\102\0\1\324\64\0\1\u02e8\36\0"+
    "\1\u02e9\66\0\1\u02ea\67\0\1\u02eb\107\0\1\u017f\44\0"+
    "\1\u0287\63\0\1\u02ec\110\0\1\u0122\52\0\1\u02ed\73\0"+
    "\1\u02ee\44\0\1\u028e\75\0\1\u02ef\34\0\1\u02f0\115\0"+
    "\1\u02f1\44\0\1\u02f2\22\0\1\u02be\2\0\1\u02f3\41\0"+
    "\1\u02f4\113\0\1\u020c\56\0\1\u02f5\47\0\1\u020c\55\0"+
    "\1\u02f6\117\0\1\u020c\33\0\1\u020c\101\0\1\u02f7\53\0"+
    "\1\u02f8\111\0\1\u02e1\36\0\1\u02dc\107\0\1\u011a\24\0"+
    "\1\u02e1\14\0\1\u02f9\11\0\1\u02fa\11\0\1\u021e\52\0"+
    "\1\u02fb\75\0\1\u02fc\57\0\1\u02fd\41\0\1\u02fe\4\0"+
    "\1\u02ff\106\0\1\u026c\35\0\1\u0300\67\0\1\u0301\61\0"+
    "\1\u0302\107\0\1\u0303\41\0\1\u01e4\114\0\1\u0304\63\0"+
    "\1\u02fd\42\0\1\u0305\16\0\1\u0120\36\0\1\u0306\1\0"+
    "\1\u0307\110\0\1\u0308\40\0\1\u0309\53\0\1\u0154\77\0"+
    "\1\u030a\64\0\1\u030b\62\0\1\u030c\112\0\1\u016d\62\0"+
    "\1\u030d\70\0\1\u030e\22\0\1\u030f\76\0\1\u0310\110\0"+
    "\1\u0311\27\0\1\u0214\6\0\1\372\66\0\1\u0312\4\0"+
    "\1\u02a2\57\0\1\u0313\53\0\1\u020c\104\0\1\u0314\57\0"+
    "\1\u0315\70\0\1\u017b\106\0\1\u0316\60\0\1\u0317\46\0"+
    "\1\u0318\11\0\1\u0319\63\0\1\u031a\53\0\1\u026c\105\0"+
    "\1\u01ce\24\0\1\u031b\102\0\1\u015e\77\0\1\u0302\33\0"+
    "\1\u0153\102\0\1\u0315\66\0\1\u031c\60\0\1\u0153\100\0"+
    "\1\u031d\43\0\1\u031e\71\0\1\u026c\111\0\1\u031f\34\0"+
    "\1\u01fe\67\0\1\u0320\66\0\1\u0321\101\0\1\u025d\65\0"+
    "\1\u0322\47\0\1\u030c\61\0\1\u030c\50\0\1\u0323\104\0"+
    "\1\u0324\62\0\1\u0325\66\0\1\u0326\107\0\1\u017b\51\0"+
    "\1\u02fa\11\0\1\u021e\36\0\1\u0327\66\0\1\u0328\102\0"+
    "\1\u0329\44\0\1\u032a\111\0\1\u032b\36\0\1\u032c\62\0"+
    "\1\u032d\103\0\1\u032e\63\0\1\372\53\0\1\u032f\61\0"+
    "\1\u026c\100\0\1\u0330\76\0\1\u0331\36\0\1\u0332\115\0"+
    "\1\u0333\36\0\1\u0334\61\0\1\u0335\105\0\1\u026c\74\0"+
    "\1\u01f1\51\0\1\u0336\44\0\1\u02fe\67\0\1\u0337\64\0"+
    "\1\u0338\104\0\1\u0153\41\0\1\367\110\0\1\u0339\43\0"+
    "\1\u033a\101\0\1\u033b\7\0\1\u033c\63\0\1\u033d\42\0"+
    "\1\u02f8\104\0\1\u026c\57\0\1\u033e\64\0\1\u033f\50\0"+
    "\1\u0245\104\0\1\u0315\27\0\1\u0340\123\0\1\u0341\36\0"+
    "\1\u020c\117\0\1\u026c\31\0\1\u0342\113\0\1\u0343\61\0"+
    "\1\u0344\27\0\1\u0328\125\0\1\u0345\60\0\1\u02a1\45\0"+
    "\1\u0346\107\0\1\u0347\56\0\1\u0348\3\0\1\u0341\62\0"+
    "\1\u0349\64\0\1\u034a\66\0\1\u034b\36\0\1\u034c\53\0"+
    "\1\u034d\125\0\1\u033c\10\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[43407];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\2\0\1\11\4\1\1\11\2\1\1\11\3\1\1\11"+
    "\5\1\1\11\11\1\1\11\3\1\1\0\1\1\1\0"+
    "\3\1\1\11\1\0\4\1\1\11\26\1\5\0\1\1"+
    "\1\0\2\1\1\11\6\1\1\11\5\1\1\0\12\1"+
    "\1\0\3\1\1\0\4\1\5\0\7\1\2\0\5\1"+
    "\1\0\3\1\1\0\3\1\30\0\4\1\2\0\1\1"+
    "\1\0\5\1\1\0\1\11\2\1\4\0\2\1\1\0"+
    "\2\1\76\0\4\1\3\0\4\1\1\0\1\1\4\0"+
    "\2\1\1\0\2\1\117\0\5\1\4\0\1\1\1\0"+
    "\1\1\1\0\1\1\15\0\1\11\23\0\1\1\45\0"+
    "\1\1\1\0\2\1\4\0\1\1\36\0\1\1\11\0"+
    "\1\1\1\0\1\1\36\0\1\1\1\0\1\1\1\11"+
    "\1\0\1\11\1\0\1\1\57\0\1\1\16\0\1\1"+
    "\5\0\1\1\1\0\1\1\2\0\1\1\1\0\1\1"+
    "\74\0\1\1\27\0\1\1\6\0\1\1\22\0\1\1"+
    "\17\0\1\1\103\0\1\1\60\0";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[845];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /* user code: */


	/**
	 * Constructor.  This must be here because JFlex does not generate a
	 * no-parameter constructor.
	 */
	public sksyntax() {
	}


	/**
	 * Adds the token specified to the current linked list of tokens.
	 *
	 * @param tokenType The token's type.
	 * @see #addToken(int, int, int)
	 */
	private void addHyperlinkToken(int start, int end, int tokenType) {
		int so = start + offsetShift;
		addToken(zzBuffer, start,end, tokenType, so, true);
	}


	/**
	 * Adds the token specified to the current linked list of tokens.
	 *
	 * @param tokenType The token's type.
	 */
	private void addToken(int tokenType) {
		addToken(zzStartRead, zzMarkedPos-1, tokenType);
	}


	/**
	 * Adds the token specified to the current linked list of tokens.
	 *
	 * @param tokenType The token's type.
	 * @see #addHyperlinkToken(int, int, int)
	 */
	private void addToken(int start, int end, int tokenType) {
		int so = start + offsetShift;
		addToken(zzBuffer, start,end, tokenType, so, false);
	}


	/**
	 * Adds the token specified to the current linked list of tokens.
	 *
	 * @param array The character array.
	 * @param start The starting offset in the array.
	 * @param end The ending offset in the array.
	 * @param tokenType The token's type.
	 * @param startOffset The offset in the document at which this token
	 *        occurs.
	 * @param hyperlink Whether this token is a hyperlink.
	 */
	public void addToken(char[] array, int start, int end, int tokenType,
						int startOffset, boolean hyperlink) {
		super.addToken(array, start,end, tokenType, startOffset, hyperlink);
		zzStartRead = zzMarkedPos;
	}


	/**
	 * {@inheritDoc}
	 */
	public String[] getLineCommentStartAndEnd(int languageIndex) {
		return new String[] { "#", null };
	}


	/**
	 * Returns the first token in the linked list of tokens generated
	 * from <code>text</code>.  This method must be implemented by
	 * subclasses so they can correctly implement syntax highlighting.
	 *
	 * @param text The text from which to get tokens.
	 * @param initialTokenType The token type we should start with.
	 * @param startOffset The offset into the document at which
	 *        <code>text</code> starts.
	 * @return The first <code>Token</code> in a linked list representing
	 *         the syntax highlighted text.
	 */
	public Token getTokenList(Segment text, int initialTokenType, int startOffset) {

		resetTokenList();
		this.offsetShift = -text.offset + startOffset;

		// Start off in the proper state.
		int state = Token.NULL;
		switch (initialTokenType) {
			/* No multi-line comments */
			/* No documentation comments */
			default:
				state = Token.NULL;
		}

		s = text;
		try {
			yyreset(zzReader);
			yybegin(state);
			return yylex();
		} catch (IOException ioe) {
			ioe.printStackTrace();
			return new TokenImpl();
		}

	}


	/**
	 * Refills the input buffer.
	 *
	 * @return      <code>true</code> if EOF was reached, otherwise
	 *              <code>false</code>.
	 */
	private boolean zzRefill() {
		return zzCurrentPos>=s.offset+s.count;
	}


	/**
	 * Resets the scanner to read from a new input stream.
	 * Does not close the old reader.
	 *
	 * All internal variables are reset, the old input stream 
	 * <b>cannot</b> be reused (internal buffer is discarded and lost).
	 * Lexical state is set to <tt>YY_INITIAL</tt>.
	 *
	 * @param reader   the new input stream 
	 */
	public final void yyreset(Reader reader) {
		// 's' has been updated.
		zzBuffer = s.array;
		/*
		 * We replaced the line below with the two below it because zzRefill
		 * no longer "refills" the buffer (since the way we do it, it's always
		 * "full" the first time through, since it points to the segment's
		 * array).  So, we assign zzEndRead here.
		 */
		//zzStartRead = zzEndRead = s.offset;
		zzStartRead = s.offset;
		zzEndRead = zzStartRead + s.count - 1;
		zzCurrentPos = zzMarkedPos = zzPushbackPos = s.offset;
		zzLexicalState = YYINITIAL;
		zzReader = reader;
		zzAtBOL  = true;
		zzAtEOF  = false;
	}




  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public sksyntax(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public sksyntax(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 158) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public org.fife.ui.rsyntaxtextarea.Token yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = zzLexicalState;


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 4: 
          { addNullToken(); return firstToken;
          }
        case 25: break;
        case 18: 
          { addToken(Token.LITERAL_CHAR);
          }
        case 26: break;
        case 7: 
          { addToken(Token.WHITESPACE);
          }
        case 27: break;
        case 17: 
          { addToken(Token.LITERAL_NUMBER_HEXADECIMAL);
          }
        case 28: break;
        case 19: 
          { addToken(Token.ERROR_STRING_DOUBLE);
          }
        case 29: break;
        case 15: 
          { addToken(Token.LITERAL_NUMBER_FLOAT);
          }
        case 30: break;
        case 24: 
          { addToken(Token.RESERVED_WORD);
          }
        case 31: break;
        case 9: 
          { addToken(Token.SEPARATOR);
          }
        case 32: break;
        case 1: 
          { addToken(Token.IDENTIFIER);
          }
        case 33: break;
        case 11: 
          { addToken(start,zzStartRead-1, Token.COMMENT_EOL); addNullToken(); return firstToken;
          }
        case 34: break;
        case 22: 
          { addToken(Token.FUNCTION);
          }
        case 35: break;
        case 3: 
          { addToken(Token.ERROR_CHAR); addNullToken(); return firstToken;
          }
        case 36: break;
        case 5: 
          { addToken(Token.ERROR_STRING_DOUBLE); addNullToken(); return firstToken;
          }
        case 37: break;
        case 20: 
          { addToken(Token.DATA_TYPE);
          }
        case 38: break;
        case 13: 
          { addToken(Token.ERROR_CHAR);
          }
        case 39: break;
        case 21: 
          { addToken(Token.LITERAL_BOOLEAN);
          }
        case 40: break;
        case 14: 
          { addToken(Token.LITERAL_STRING_DOUBLE_QUOTE);
          }
        case 41: break;
        case 23: 
          { int temp=zzStartRead; addToken(start,zzStartRead-1, Token.COMMENT_EOL); addHyperlinkToken(temp,zzMarkedPos-1, Token.COMMENT_EOL); start = zzMarkedPos;
          }
        case 42: break;
        case 16: 
          { addToken(Token.RESERVED_WORD_2);
          }
        case 43: break;
        case 12: 
          { addToken(Token.ERROR_NUMBER_FORMAT);
          }
        case 44: break;
        case 6: 
          { start = zzMarkedPos-1; yybegin(EOL_COMMENT);
          }
        case 45: break;
        case 2: 
          { addToken(Token.LITERAL_NUMBER_DECIMAL_INT);
          }
        case 46: break;
        case 8: 
          { addToken(Token.OPERATOR);
          }
        case 47: break;
        case 10: 
          { 
          }
        case 48: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            switch (zzLexicalState) {
            case EOL_COMMENT: {
              addToken(start,zzStartRead-1, Token.COMMENT_EOL); addNullToken(); return firstToken;
            }
            case 846: break;
            case YYINITIAL: {
              addNullToken(); return firstToken;
            }
            case 847: break;
            default:
            return null;
            }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
